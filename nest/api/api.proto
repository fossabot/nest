syntax = "proto3";

package api;

import "go.etcd.io/etcd/raft/raftpb/raft.proto";

message Payload { bytes Data = 1; }

message RaftContext {
  uint64 ID = 1;
  string Address = 2;
}

message JoinClusterResponse {}

message GetMembersRequest {}
message Member {
  uint64 ID = 1;
  string Address = 2;
  bool IsLeader = 3;
  bool IsAlive = 4;
}
message GetMembersResponse { repeated Member Members = 1; }
message GetStatusRequest {};
message GetStatusResponse {
  bool IsLeader = 1;
  bool HasBeenBootstrapped = 2;
  bool IsInCluster = 3;
};

service Raft {
  rpc ProcessMessage(raftpb.Message) returns (Payload) {}
  rpc JoinCluster(RaftContext) returns (JoinClusterResponse) {}
  rpc GetMembers(GetMembersRequest) returns (GetMembersResponse) {}
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse) {}
}

message Record {
  int64 Timestamp = 1;
  bytes Topic = 2;
  bytes Payload = 3;
}

message PutRecordsRequest{
  repeated Record Records = 1;
}
message PutRecordsResponse {}
message GetRecordsRequest{
  int64 FromTimestamp = 1;
  repeated bytes Patterns = 2;
}
message GetRecordsResponse {
  repeated Record Records = 1;
}
message DumpRequest {
  string DestinationURL = 1;
}
message DumpResponse {
  int64 StartedAt = 1;
  int64 ProgressBytes = 2;
  int64 TotalBytes = 3;
}
message LoadRequest {
  string SourceURL = 1;
}
message LoadResponse {
  int64 StartedAt = 1;
  int64 ProgressBytes = 2;
  int64 TotalBytes = 3;
}
service Messages {
  rpc Dump(DumpRequest) returns (stream DumpResponse) {}
  rpc Load(LoadRequest) returns (stream LoadResponse) {}
  rpc PutRecords(PutRecordsRequest) returns (PutRecordsResponse) {}
  rpc GetRecords(GetRecordsRequest) returns (stream GetRecordsResponse) {}
}

message ShutdownRequest {}
message ShutdownResponse {}

service Node {
  rpc Shutdown(ShutdownRequest) returns (ShutdownResponse) {}
}